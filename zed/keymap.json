// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
[
  {
    "bindings": {
      // prevent accidential hiding
      "cmd-h": null
    }
  },
  {
    "context": "Workspace",
    "bindings": {
      "shift shift": "file_finder::Toggle",
      "f1": "command_palette::Toggle",
      "ctrl-/": "terminal_panel::ToggleFocus",
      "ctrl ctrl": "workspace::ToggleLeftDock",
      "cmd-r": null
    }
  },
  {
    "context": "EmptyPane || PromptLibrary || (ProjectSearchBar > Editor)",
    "bindings": {
      "space b d": "pane::CloseActiveItem",
      "alt-l": "pane::ActivateNextItem",
      "alt-h": "pane::ActivatePreviousItem",
      // Experimental - go down to the multibuffer if you are in project searchbar
      "ctrl-j": ["workspace::SendKeystrokes", "escape"]
    }
  },
  {
    "context": "Editor",
    "bindings": {
      "ctrl-s": "workspace::Save",
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": null,
      "ctrl-j": ["workspace::SendKeystrokes", "escape"]
      // "space e": ["workspace::SendKeystrokes", ":e  "]
      // "j k": ["workspace::SendKeystrokes", "escape"]
    }
  },
  // https://zed.dev/docs/vim#useful-contexts-for-vim-mode-key-bindings
  {
    "context": "VimControl && !menu",
    "bindings": {
      // Put key bindings here if you want them to work in normal & visual mode.
      "tab": "tab_switcher::Toggle",
      "space f f": "file_finder::Toggle",
      "space f s": "project_symbols::Toggle",
      "space b d": "pane::CloseActiveItem",
      "space b o": "workspace::CloseInactiveTabsAndPanes",
      "space e e": "project_panel::ToggleFocus",
      "space g e": "git_panel::ToggleFocus",
      "ctrl-h": ["workspace::SendKeystrokes", "ctrl-w h"],
      "ctrl-k": ["workspace::SendKeystrokes", "ctrl-w k"],
      "ctrl-j": ["workspace::SendKeystrokes", "ctrl-w j"],
      "alt-l": "pane::ActivateNextItem",
      "alt-h": "pane::ActivatePreviousItem",
      "shift-h": ["workspace::SendKeystrokes", "_"],
      "shift-l": ["workspace::SendKeystrokes", "$"],
      "space q q": "zed::Quit",
      "ctrl-shift-u": "vim::ScrollUp",
      // scroll and center
      "ctrl-u": ["workspace::SendKeystrokes", "ctrl-u z z"],
      "ctrl-d": ["workspace::SendKeystrokes", "ctrl-d z z"],
      "g n": "vim::SelectNext",
      "g l": "go_to_line::Toggle",
      "space l c": "vim::InsertAtPrevious",
      "space u u": "editor::FindAllReferences",
      "space o o": "outline::Toggle",
      "alt-k": "editor::ExpandExcerptsUp",
      "alt-j": "editor::ExpandExcerptsDown"
    }
  },
  {
    "context": "vim_mode == normal && !menu",
    "bindings": {
      "shift-h": ["workspace::SendKeystrokes", "_"],
      "shift-l": ["workspace::SendKeystrokes", "$"],
      "x": ["workspace::SendKeystrokes", "\" _ x"],
      "shift-d": "editor::DeleteToEndOfLine",
      "shift-c": ["workspace::SendKeystrokes", "shift-d i"],
      "c": ["workspace::SendKeystrokes", "\" _ c"],
      "space w l": "pane::SplitRight",
      // "space w h": "pane::SplitLeft",
      "space r n": "editor::Rename",
      "space o C": "git::Diff",
      "space o c": "editor::ExpandAllDiffHunks",
      "ctrl-c": ["workspace::SendKeystrokes", "escape"],
      "space c c": "editor::ToggleSelectedDiffHunks",
      "space g s": "git::ToggleStaged",
      "space G r f": "git::RestoreFile",
      "space g r": "git::Restore",
      "space g r f": ["workspace::SendKeystrokes", "space G r f ctrl-s"]
      // "fn-r": "search::ReplaceNext"
      // in order to move the middle window and merge it to the right
      // "": "pane::JoinIntoNext"
    }
  },
  {
    "context": "vim_mode == visual",
    "bindings": {
      "c": ["workspace::SendKeystrokes", "\" _ d i"],
      "shift-k": "editor::MoveLineUp",
      "shift-j": "editor::MoveLineDown",
      "shift-s": ["vim::PushAddSurrounds", {}],
      "<": ["workspace::SendKeystrokes", "< g v"],
      ">": ["workspace::SendKeystrokes", "> g v"]
    }
  },
  {
    "context": "EmptyPane || SharedScreen",
    "bindings": {
      // Put key bindings here (in addition to the context above) if you want them to
      // work when no editor exists.
      "space f": "file_finder::Toggle",
      "space e e": "project_panel::ToggleFocus"
    }
  },
  {
    "context": "ProjectPanel && !editing",
    "bindings": {
      "space e e": "workspace::ToggleLeftDock",
      "A": "project_panel::NewDirectory",
      "a": "project_panel::NewFile",
      "d": "project_panel::Delete",
      "p": "project_panel::Paste",
      "y": "project_panel::Copy",
      "r": "project_panel::Rename",
      "z": "project_panel::CollapseAllEntries"
    }
  },
  {
    "context": "Terminal",
    "bindings": {
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-w k": "workspace::ActivatePaneUp",
      "ctrl-/": "workspace::ToggleBottomDock",
      "ctrl-n": "workspace::NewTerminal",
      "alt-h": "pane::ActivatePreviousItem",
      "alt-l": "pane::ActivateNextItem",
      "shift-k": "terminal::ScrollLineUp",
      "shift-j": "terminal::ScrollLineDown",
      "ctrl-;": "terminal::ToggleViMode"
    }
  },
  // in git diff editor
  {
    "context": "GitDiff > Editor && vim_mode == normal && !menu",
    "bindings": {
      "space o c": "pane::CloseActiveItem"
    }
  },
  // in the git panel list
  {
    "context": "GitPanel && menu && ChangesList",
    "bindings": {
      "space": null,
      "space g e": "git_panel::Close",
      "space g s": "git::ToggleStaged",
      "t": "git::ToggleStaged",
      "space g r f": "git::RestoreFile"
    }
  },
  {
    "context": "GitDiff > Editor && vim_mode==normal",
    "bindings": {
      "space g s": "git::StageAndNext",
      "space g u": "git::UnstageAndNext"
    }
  },
  {
    // context from vim git keybindings
    "context": "(GitPanel && ChangesList)|| (GitPanel || CommitEditor > Editor) || ProjectPanel || CollabPanel || (OutlinePanel || OutlinePanel > Editor) || ChatPanel || VimControl || EmptyPane || SharedScreen || MarkdownPreview || KeyContextView",
    "bindings": {
      "ctrl-h": ["workspace::SendKeystrokes", "ctrl-w h"],
      "ctrl-k": ["workspace::SendKeystrokes", "ctrl-w k"],
      "ctrl-j": ["workspace::SendKeystrokes", "ctrl-w j"],
      "ctrl-l": ["workspace::SendKeystrokes", "ctrl-w l"],
      "space b d": "pane::CloseActiveItem"
    }
  },
  {
    "context": "Editor && multibuffer",
    "bindings": {
      // while inside a multibuffer to go back to the search panel on the top it will focus the search
      "ctrl-k": "search::FocusSearch"
    }
  }
]
