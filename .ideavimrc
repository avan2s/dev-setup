" ------ CONFIG -------
" following plugins must be installed
" AceJump (3.8.20) => seems to be auto installed with IdeaVim-EasyMotion
" Awesome Console (0.1337.12)
" File Watchers (242.20224.155)
" IdeaVim (2.16.0)
" IdeaVim-EasyMotion (1.15)
" Key Promoter X (2024.2.0)
" Prisma ORM (242.22855.32)
" Test Automation (242.23339.24)
" Which-Key (0.10.3)

" inspired by https://github.com/JetBrains/ideavim/discussions/578#discussioncomment-8450898
set number relativenumber
set idearefactormode=keep

"enable plugins
set which-key
set ideajoin
Plug 'machakann/vim-highlightedyank'
Plug 'tpope/vim-commentary'
Plug 'vim-scripts/ReplaceWithRegister'
Plug 'tpope/vim-surround'


" This makes clipboard and yanking the same
set clipboard=unnamedplus
"set shiftround                  " use multiple of shiftwidth when indenting with '<' and '>'
" filetype plugin indent on

" search & replace configuration
set hlsearch " highlight search
set incsearch " Incrementally search while typing
set ignorecase " Use smart case for searching
set smartcase " if you type uppercase letter in the search, it will be case sensitive
set matchpairs+=<:>

" tabs & indentation (unsupported in ideavim plugin - should be set via editor settings)
" set tabstop=2 " 2 spaces for tabs (prettier default)
" set shiftwidth=2 "2 spaces for indent width
" set expandtab                   " expand tabs to spaces by default
" set autoindent " copy indent from current line when starting new one

" mute sound
set belloff=all
set visualbell
set t_vb=


" https://www.johnhawthorn.com/2012/09/vi-escape-delays/
" timeoutlen is used for mapping delays, and ttimeoutlen is used for key code delays
"set timeoutlen=180 ttimeoutlen=0
" for which-key
set notimeout

" And remember to write the ollowing line before that, to make sure spacebar doesn't have any mapping beforehand:
noremap <SPACE> <Nop>
let mapleader = " "

" delete without yanking
nnoremap <leader>d "_d
nnoremap x "_x
nnoremap s "_s
nnoremap c "_c
nnoremap C "_C
nnoremap S "_S
nnoremap <leader>nx :nohl<CR>
let g:WhichKeyDesc_ClearSearchHighlights = "<leader>nx Clear search highlights"
nnoremap <C-d> <C-d>zz
let g:WhichKeyDesc_ScrollDownAndCenter = "<C-d> scroll down and center"
nnoremap <C-u> <C-u>zz
let g:WhichKeyDesc_ScrollUpAndCenter = "<C-u> scroll up and center"
noremap H ^
noremap L $
nnoremap <CR> o<Esc>

" allow switching number formats - good for sharing screen
nnoremap <leader>nn :set number norelativenumber<CR>
nnoremap <leader>nr :set relativenumber<CR>

" Tab navigation
nmap <A-l> <Action>(NextTab)
nmap <A-h> <Action>(PreviousTab)
nmap <leader>wq <Action>(Terminal.CloseTab)

nmap <C-h> <C-w>h
nmap <C-l> <C-w>l
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <leader>wv <Action>(MoveTabRight)
let g:WhichKeyDesc_MoveTabRight = "<leader>wv move tab right"
nmap <leader>wo <Action>(MoveEditorToOppositeTabGroup)
let g:WhichKeyDesc_MoveEditorToOppositeTabGroup = "<leader>wo move editor to opposite tab group"
nmap <leader>wq <Action>(CloseEditor)
let g:WhichKeyDesc_CloseEditor = "<leader>wq close editor"
nmap <leader>wq <Action>(CloseContent)
let g:WhichKeyDesc_CloseContent = "<leader>wq close content"
nmap <leader>wQ <Action>(CloseAllEditors)
let g:WhichKeyDesc_CloseAllEditors = "<leader>wQ close all editors"
nmap <leader>wxa <Action>(CloseAllEditors)
let g:WhichKeyDesc_CloseAllEditors = "<leader>wxa close all editors"
nmap <leader>wxo <Action>(CloseAllEditorsButActive)
let g:WhichKeyDesc_CloseAllEditorsButActive = "<leader>wxo close all editors but active"
" nmap <C-l> <Action>(NextSplitter)
" nmap <C-k> <Action>(PrevSplitter)
let g:WhichKeyDesc_WindowLeft = "<C-h> Move to left window"
let g:WhichKeyDesc_WindowRght = "<C-l> Move to right window"
let g:WhichKeyDesc_WindowDown = "<C-j> Move to window below"
let g:WhichKeyDesc_WindowUp = "<C-k> Move to window above"

" Action find and replace
nmap <leader>fi <Action>(Find)
nmap <leader>ff <Action>(FindInPath)
nmap <leader>ri <Action>(Replace)
nmap <leader>rr <Action>(ReplaceInPath)

" source code navigation
nmap <leader>sc <Action>(GotoClass)
nmap <leader>sf <Action>(GotoFile)
nmap <leader>ss <Action>(GotoSymbol)
map <leader>sa <Action>(GotoAction)
nmap <leader>gl <Action>(GotoLine)

nmap gi <Action>(GotoImplementation)
nmap gh <Action>(ShowHoverInfo)
nmap <leader>gd <Action>(GotoDeclaration)
nmap <leader>gy <Action>(GotoTypeDeclaration)
nmap <leader>gi <Action>(GotoImplementation)
nmap <leader>gt <Action>(GotoTest)
nmap <leader>gm <Action>(GotoSuperMethod)
nmap <leader>gu <Action>(FindUsages)
nmap <leader>uu <Action>(ShowUsages)
nmap <leader>vs <Action>(ViewSource)
nmap <leader>ti <Action>(ExpressionTypeInfo)
nmap <leader>pi <Action>(ParameterInfo)
nmap <leader>oo <Action>(FileStructurePopup)
map <leader>sw <Action>(SurroundWith)
nmap <S-space> <Action>(Generate)
nmap <leader>en <Action>(GotoNextError)
nmap <leader>eN <Action>(GotoPreviousError)
nmap <leader>lc <Action>(JumpToLastChange)
nmap <leader>ll <Action>(RecentLocations)
nmap <c-;> <Action>(RecentFiles)
nmap <c-z> <Action>(ToggleDistractionFreeMode)
nmap <A-]> <Action>(MethodDown)
nmap <A-[> <Action>(MethodUp)
nmap <c-]> <Action>(Forward)
nmap <c-[> <Action>(Back)
nmap <c-n> <Action>(Tree-selectNext)
nmap <c-p> <Action>(Tree-selectPrevious)
vmap K <Action>(MoveStatementUp)
vmap J <Action>(MoveStatementDown)
let g:WhichKeyDesc_GotoImplementation = "<leader>gi go to implementation"
let g:WhichKeyDesc_GotoLastLocations = "<leader>ll last locations"

" nnoremap <c-t> :action ActivateTerminalToolWindow<CR>
nmap <c-t> <Action>(ActivateTerminalToolWindow)

"refactoring - also in visual mode if something is selected
map<leader>rn <Action>(RenameElement)
map<leader>rm <Action>(ExtractMethod)
map<leader>rv <Action>(IntroduceVariable)
map<leader>rf <Action>(IntroduceField)
map<leader>rs <Action>(ChangeSignature)
map<leader>ref <Action>(Refactorings.QuickListPopupAction)

" code style
nmap <leader>oi <Action>(OptimizeImports)
map <leader>ra <Action>(RearrangeCode)
nmap <leader>fc <Action>(ReformatCode)
map<leader>ca <Action>(CopyAbsolutePath)
map<leader>cn <Action>(CopyFileName)
map<leader>cp <Action>(CopyContentRootPath)
map<leader>cr <Action>(CopyPathFromRepositoryRootProvider)

" file management
nmap <leader><leader>s <Action>(NewScratchFile)
let g:WhichKeyDesc_NewScratchFile="<leader><leader>s New scratch file"
nmap <leader><leader>n <Action>(NewFile)
let g:WhichKeyDesc_NewFile="<leader><leader>n New file"
nmap <leader><leader>N <Action>(NewDir)
let g:WhichKeyDesc_NewDir="<leader><leader>N New directory"
nmap <leader>rN <Action>(RenameFile)
let g:WhichKeyDesc_RenameFile="<leader>rN Rename file"
nmap <leader>fm <Action>(Move)
let g:WhichKeyDesc_Move="<leader>fm Move"
nmap <leader>of <Action>(OpenFile)
let g:WhichKeyDesc_OpenFile="<leader>of Open file"
nmap <leader><leader>re <Action>(RestartIde)
let g:WhichKeyDesc_RestartIde="<leader><leader>re Restart IDE"

" ai
map <leader>ai <Action>(com.codeium.intellij.command.CommandAction)
let g:WhichKeyDesc_CommandAction="<leader>ai Ai-Instruction"
vmap <leader>ex <Action>(com.codeium.intellij.editor_menu.ExplainSelection)
let g:WhichKeyDesc_ExplainSelection="<leader>ex Explain selection"

" Git open changes for current file
" nmap <leader>oc <Action>(Vcs.ShowTabbedFileHistory)
nmap <leader>oc <Action>(Compare.SameVersion)
let g:WhichKeyDesc_GitOpenChanges = "<leader>oc Show changes for current file"
"nmap <leader>gl <Action>(ActivateVersionControlToolWindow)
nmap <leader>grs <Action>(ChangesView.Revert)
nmap <leader>gc <Action>(ActivateCommitToolWindow)
nmap <leader><leader>dh <Action>(Diff.ApplyLeftSide)
nmap <leader><leader>dl <Action>(Diff.ApplyRightSide)
let g:WhichKeyDesc_ApplyLeftSide = "<leader><leader>dh Apply left side"
let g:WhichKeyDesc_ApplyRightSide = "<leader><leader>dl Apply right side"

" replace currently selected text with default register without yanking it
" vnoremap p "_dP
let g:WhichKeyDesc_DeleteCharWithoutYank = "x Delete single character without yanking"
let g:WhichKeyDesc_ChangeWithoutYank = "<leader>c change without yanking"
let g:WhichKeyDesc_DeleteWithoutYank = "<leader>d delete without yanking"
let g:WhichKeyDesc_PreviousTab = "<A-h> Go to previous tab"
let g:WhichKeyDesc_NextTab = "<A-l> Go to next tab"

" NERD tree configuration
set NERDTree
let g:NERDTreeMapActivateNode='l'
let g:NERDTreeMapCloseDir='h'
let g:NERDTreeMapPreviewVSplit='S'
nmap <leader>ee :NERDTreeFocus<CR>
let g:WhichKeyDesc_NerdTreeFocus = "<leader>ee Focus NerdTree"

Plug 'easymotion/vim-easymotion'
map <leader>j <Plug>(easymotion-f)


